//               Taha Aftab 5/09/23                   //
                                                     
//               Pin config for C21                   //

// Physical Pin     Software pin      

//inputs     


//  | pb3           |  11             |   op16          |
//  | pb4           |  12             |   op19          |      
//  | pd5           |  13             |   op4           |

//d8 = 1

//  | pc0           |  14             |   op1           |
//  | pc1           |  15             |   op5           |
//  | pc2           |  16             |   op8           |
//  | pc3           |  17             |   op11          |
//  | pc4           |  18             |   op14          |
//  | pc5           |  19             |   op17          |
//  | pd2           |  2              |   op2           |
//  | pd3           |  3              |   op6           |

//d8 = 0

//  | pc0           |  14             |   op9           |
//  | pc1           |  15             |   op12          |
//  | pc2           |  16             |   op15          |
//  | pc3           |  17             |   op18          |
//  | pc4           |  18             |   op3           |
//  | pc5           |  19             |   op7           |
//  | pd2           |  2              |   op10          |
//  | pd3           |  3              |   op13          |


//---------------------------------------------------

//outputs

//  | pd4            |  4            |   op20   LSB
//  | pd5            |  5            |   op21
//  | pd6            |  6            |   op22
//d8



void setup() 
{   
  for( int i = 4; i <7 ; i ++)
  {
    pinMode(i ,OUTPUT);
  }
  
  pinMode(8, OUTPUT);
  
  
  pinMode(3,INPUT);
  pinMode(2,INPUT);
  

  for( int i = 11; i <20 ; i ++)
  {
    pinMode(i ,INPUT);
  }

  Serial.begin(9600);

  digitalWrite(4 , HIGH);
  //Serial.println("op20 Inactive");
 
  digitalWrite(5 , HIGH);
 // Serial.println("op21 Inactive");
  
  digitalWrite(6 , HIGH);
  //Serial.println("op22 Inactive");

}

byte error[3] = {0};
byte dataIn[3] = {0};
byte optos[3] = {0}; ///opto status
bool validityCheck();
void ReadOpto1();
void ReadOpto2();
void WriteOptos();
void CsvToInt(String a);
void defaultcase();
void findError(byte fixed1 , byte fixed2 , byte fixed3, byte status1 , byte status2 , byte status3);


void loop()
{
    
  if (Serial.available())
  {
    String rcvd = Serial.readStringUntil('\n') ;
    
    CsvToInt(rcvd);
    
    if (validityCheck() == 1)
    {

      Serial.println("Sequence 1");
      defaultcase();


      delay(1000);
      digitalWrite(8 , HIGH);
      ReadOpto1();
      delay(100);
      digitalWrite(8 , LOW);
      ReadOpto2();
      
      if ((optos[0] == 111) && (optos[1] == 212) && (optos[2] == 3))
      {
         Serial.println("Sequence 1 passed");
      }
      else{
        Serial.println("Sequence 1 failed");
        findError(111 , 212 , 3 , optos[0] , optos[1], optos[2]);
      }

      Serial.println();

      Serial.println("Sequence 2");
      digitalWrite(4 , LOW);
      //Serial.println("op20");
    
      digitalWrite(5 , HIGH);
      //Serial.println("op21);
      
      digitalWrite(6 , HIGH);
      //Serial.println("op22");


      delay(1000);
      digitalWrite(8 , HIGH);
      ReadOpto1();
      delay(100);
      digitalWrite(8 , LOW);
      ReadOpto2();
      
      if ((optos[0] == 111) && (optos[1] == 214) && (optos[2] == 3))
      {
         Serial.println("Sequence 2 passed");
      }
      else{
        Serial.println("Sequence 2 failed");
        findError(111 , 214 , 3 , optos[0] , optos[1], optos[2]);
      }

      Serial.println();

      defaultcase();



      Serial.println("Sequence 3");
      digitalWrite(4 , HIGH);
      //Serial.println("op20");
    
      digitalWrite(5 , HIGH);
      //Serial.println("op21);
      
      digitalWrite(6 , LOW);
      //Serial.println("op22");


      delay(1000);
      digitalWrite(8 , HIGH);
      ReadOpto1();
      delay(100);
      digitalWrite(8 , LOW);
      ReadOpto2();
      
      if ((optos[0] == 110) && (optos[1] == 212) && (optos[2] == 7))
      {
         Serial.println("Sequence 3 passed");
      }
      else{
        Serial.println("Sequence 3 failed");
        findError(110 , 212 , 7 , optos[0] , optos[1], optos[2]);
      }

      Serial.println();

      defaultcase();

      Serial.println("Sequence 4");
      digitalWrite(4 , HIGH);
      //Serial.println("op20");
    
      digitalWrite(5 , LOW);
      //Serial.println("op21);
      
      digitalWrite(6 , HIGH);
      //Serial.println("op22");


      delay(1000);
      digitalWrite(8 , HIGH);
      ReadOpto1();
      delay(100);
      digitalWrite(8 , LOW);
      ReadOpto2();
      
      if ((optos[0] == 147) && (optos[1] == 233) && (optos[2] == 1))
      {
         Serial.println("Sequence 4 passed");
      }
      else{
        Serial.println("Sequence 4 failed");
        findError(147 , 233 , 1 , optos[0] , optos[1], optos[2]);
      }

      Serial.println();

      

      Serial.println("Sequence 5");
      
      defaultcase();

      delay(1000);
      digitalWrite(8 , HIGH);
      ReadOpto1();
      delay(100);
      digitalWrite(8 , LOW);
      ReadOpto2();
      
      if ((optos[0] == 111) && (optos[1] == 212) && (optos[2] == 3))
      {
        Serial.println("Sequence 5 passed");
      }
      else
      {  
        Serial.println("Sequence 5 failed");
        findError(111 , 212 , 3, optos[0] , optos[1] , optos[2]);
      }

      int ad1=0;

      for (int i = 1 ; i <=5 ; i ++)
      {
        int temp1 = analogRead(A6);
        ad1 +=temp1; 
        delay(200);
      }
      
      ad1 = ad1/5;


      delay(100);
      
      int ad2=0;

      for (int i = 1 ; i <=5 ; i ++)
      {
        int temp2 = analogRead(A7);
        ad2 +=temp2; 
        delay(200);
      }
      
      ad2 = ad2/5;

    
      Serial.println();
      Serial.print("ADC1:  " );
      Serial.println(ad1);

      Serial.println();
      Serial.print("ADC2:  " );
      Serial.println(ad2);

      Serial.println();

      if ( ad1 >= 295 && ad1 <=425 && ad2<=240 && ad2>=120)
      {
        Serial.println("ADC Test passed");
      }
      else
      {
        Serial.println("ADC Test failed");
        if(~(ad1 >= 295 && ad1 <=425))
        {
          error[2] |= (1<<3);
        }
        if(~(ad2<=240 && ad2>=120))
        {
          error[2] |= (1<<4);
        }
      }

      Serial.print("Error Code: ");

      for(int i = 0 ; i < 5 ; i ++)
      {
      Serial.print(error[2] >> 4-i & 1);
      }

      Serial.print(" ");

      for(int i = 0 ; i < 8 ; i ++)
      {
      Serial.print(error[1] >> 7-i & 1);
      }

      Serial.print(" ");

      for(int i = 0 ; i < 8 ; i ++)
      {
      Serial.print(error[0] >> 7-i & 1);
      }
      
      error[0] = 0;
      error[1] = 0;
      error[2] = 0;
      
     
      Serial.println();
    }
  }
}


bool validityCheck()
{ 
  int xorResult = 0x00;

  // xor bit by bit

  for (int i = 0; i < 6; i++) {
    int temp = (dataIn[0] >> i & 1) ^ (dataIn[1] >> i & 1);
    xorResult |= (temp << i);
  }

  if ((xorResult == dataIn[2] ) && dataIn[0] == 7)
  {
    return 1;
  }
  else 
  {
    return 0;
  }
}


void ReadOpto1( )
{
  if(digitalRead(14) == LOW)
  {
    //Serial.println("op1 active");
    optos[0] |= (1<<0);
  }

  else
  {
    optos[0] &= ~(1<<0);
  }



  if(digitalRead(15) == LOW)
  {
    //Serial.println("op5 active");
    optos[0] |= (1<<1);
  }

  else
  {
    optos[0] &= ~(1<<1);
  }

  if(digitalRead(16) == LOW)
  {
    //Serial.println("op8 active");
    optos[0] |= (1<<2);
  }

  else
  {
    optos[0] &= ~(1<<2);
  }

  if(digitalRead(17) == LOW)
  {
    //Serial.println("op11 active");
    optos[0] |= (1<<3);
  }

  else
  {
    optos[0] &= ~(1<<3);
  }

  if(digitalRead(18) == LOW)
  {
    //Serial.println("op14 active");
    optos[0] |= (1<<4);
  }

  else
  {
    optos[0] &= ~(1<<4);
  }

    if(digitalRead(19) == LOW)
  {
    //Serial.println("op17 active");
    optos[0] |= (1<<5);
  }

  else
  {
    optos[0] &= ~(1<<5);
  }


  if(digitalRead(2) == LOW)
  {
    //Serial.println("op2 active");
    optos[0] |= (1<<6);
  }

  else
  {
    optos[0] &= ~(1<<6);
  }



  if(digitalRead(3) == LOW)
  {
    //Serial.println("op6 active");
    optos[0] |= (1<<7);
  }

  else
  {
    optos[0] &= ~(1<<7);
  }
}

void ReadOpto2()
{

  
if(digitalRead(14) == LOW)
  {
    //Serial.println("op9 active");
    optos[1] |= (1<<0);
  }

  else
  {
    optos[1] &= ~(1<<0);
  }



  if(digitalRead(15) == LOW)
  {
    //Serial.println("op12 active");
    optos[1] |= (1<<1);
  }

  else
  {
    optos[1] &= ~(1<<1);
  }

  if(digitalRead(16) == LOW)
  {
    //Serial.println("op15 active");
    optos[1] |= (1<<2);
  }

  else
  {
    optos[1] &= ~(1<<2);
  }

  if(digitalRead(17) == LOW)
  {
    //Serial.println("op18 active");
    optos[1] |= (1<<3);
  }

  else
  {
    optos[1] &= ~(1<<3);
  }

  if(digitalRead(18) == LOW)
  {
    //Serial.println("op3 active");
    optos[1] |= (1<<4);
  }

  else
  {
    optos[1] &= ~(1<<4);
  }

    if(digitalRead(19) == LOW)
  {
    //Serial.println("op7 active");
    optos[1] |= (1<<5);
  }

  else
  {
    optos[1] &= ~(1<<5);
  }


  if(digitalRead(2) == LOW)
  {
    //Serial.println("op10 active");
    optos[1] |= (1<<6);
  }

  else
  {
    optos[1] &= ~(1<<6);
  }



  if(digitalRead(3) == LOW)
  {
    //Serial.println("op13 active");
    optos[1] |= (1<<7);
  }

  else
  {
    optos[1] &= ~(1<<7);
  }


  if(digitalRead(11) == LOW)
  {
    //Serial.println("op16 active");
    optos[2] |= (1<<0);
  }

  else
  {
    optos[2] &= ~(1<<0);
  }

  if(digitalRead(12) == LOW)
  {
    //Serial.println("op19 active");
    optos[2] |= (1<<1);
  }

  else
  {
    optos[2] &= ~(1<<1);
  }

  if(digitalRead(13) == LOW)
  {
    //Serial.println("op4 active");
    optos[2] |= (1<<2);
  }

  else
  {
    optos[2] &= ~(1<<2);
  }


  Serial.println("opto status: ");

  for( int i  = 0 ; i < 3  ; i++)
  {
    Serial.print( optos[2] >> 2-i & 1) ;   
  }

  Serial.print(" ");

  for( int i  = 0 ; i < 8  ; i++)
  {
    Serial.print( optos[1] >> 7-i & 1) ;   
  }

  Serial.print(" ");

  for( int i  = 0 ; i < 8 ; i++)
  {
    Serial.print( optos[0] >> 7-i & 1) ;   
  }

  Serial.println();

}

void CsvToInt(String a) {
  
  int commaIndex = a.indexOf(',');
  int secondCommaIndex = a.indexOf(',', commaIndex + 1);

  String firstValue = a.substring(0, commaIndex);
  String secondValue = a.substring(commaIndex + 1, secondCommaIndex);
  String thirdValue = a.substring(secondCommaIndex + 1);

  int a1 = firstValue.toInt();
  int a2 = secondValue.toInt();
  int a3 = thirdValue.toInt();
  
  dataIn[0] = a1;
  dataIn[1] = a2;
  dataIn[2] = a3;
    
}

void WriteOptos(){

 
    if (dataIn[0] >> 0 & 1 == 1)
    {
      digitalWrite(4 , LOW);
      Serial.println("op20 active");
    }
    else
    {
      digitalWrite(4 , HIGH);
      Serial.println("op20 Inactive");
    }
    
    if (dataIn[0] >> 1 & 1 == 1)
    {
      digitalWrite(5 , LOW);
      Serial.println("op21 active");
    }
    else
    {
      digitalWrite(5 , HIGH);
      Serial.println("op21 Inactive");
    }
    
     if (dataIn[0] >> 2 & 1 == 1)
    {
      digitalWrite(6 , LOW);
      Serial.println("op22 active");
    }
    else
    {
      digitalWrite(6 , HIGH);
    Serial.println("op22 Inactive");
    }
    
}

void defaultcase()
{
       
  digitalWrite(4 , HIGH);
  //Serial.println("op20 Inactive");
 
  digitalWrite(5 , HIGH);
 // Serial.println("op21 Inactive");
  
  digitalWrite(6 , HIGH);
  //Serial.println("op22 Inactive");

}


void findError(byte fixed1 , byte fixed2 , byte fixed3,  byte status1 , byte status2, byte status3)
{
  //bit compare


  for (int i = 0 ; i < 8 ; i ++)
  {
    if ( (status1 >> i & 1) == (fixed1 >> i & 1)) 
    {
      error[0] = error[0];
    }  

    else 
    {
      error[0] |= (1<<i);
    }
  }

  for ( int i  = 0 ; i < 8 ; i ++)
  {
    if ((status2 >> i & 1) == (fixed2 >> i & 1))
    {
      error[1] = error[1];
    }
    else 
    {
      error[1] |= (1<<i);
    }
  }

  for ( int i  = 0 ; i < 5 ; i ++)
  {
    if (((status3 >> i) & 1) == ((fixed3 >> i) & 1))
    {
      error[2] = error[2];
    }
    else 
    {
      error[2] |= (1<<i);
    }
  }
}


